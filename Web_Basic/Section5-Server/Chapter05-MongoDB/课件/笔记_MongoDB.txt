mongoDB安装
---------------------------------------------------------------------
SQL
- 结构化查询语言
- 关系数据库全都同SQL来操作
	
安装MongoDB
- 安装
- 配置环境变量
	C:\Program Files\MongoDB\Server\3.2\bin
- 在c盘根目录
	- 创建一个文件夹 data
	- 在data中创建一个文件夹db
	
- 打开cmd命令行窗口
	- 输入 mongod 启动mongodb服务器
	- 32位注意：
		启动服务器时，需要输入如下内容
			mongod --storageEngine=mmapv1
			
			mongod --dbpath 数据库路径 --port 端口号

- 在打开一个cmd窗口
	- 输入 mongo 连接mongodb ，出现 > 
	
- 数据库（database）
	- 数据库的服务器
		- 服务器用来保存数据
		- mongod 用来启动服务器
		
	- 数据库的客户端
		- 客户端用来操作服务器，对数据进行增删改查的操作
		- mongo 用来启动客户端
		
		
- 将MongoDB设置为系统服务，可以自动在后台启动，不需要每次都手动启动
	1.在c盘根目录创建data
		- 在data下创建db和log文件夹
	2.创建配置文件
		在目录 C:\Program Files\MongoDB\Server\3.2 下添加一个配置文件
		mongod.cfg
	3.以管理员的身份打开命令行窗口	
	
	4.执行如下的命令
		sc.exe create MongoDB binPath= "\"C:\Program Files\MongoDB\Server\3.2\bin\mongod.exe\" --service --config=\"C:\Program Files\MongoDB\Server\3.2\mongod.cfg\"" DisplayName= "MongoDB" start= "auto"
		
		sc.exe create MongoDB binPath= "\"mongod的bin目录\mongod.exe\" --service --config=\"mongo的安装目录\mongod.cfg\"" DisplayName= "MongoDB" start= "auto"
		
	5.启动mongodb服务
	6.如果启动失败，证明上边的操作有误，
		在控制台输入 sc delete MongoDB 删除之前配置的服务
		然后从第一步再来一次


基本概念
	数据库（database）
	集合（collection）
	文档（document）
		- 在MongoDB中，数据库和集合都不需要手动创建，
			当我们创建文档时，如果文档所在的集合或数据库不存在会自动创建数据库和集合
	
基本指令
	show dbs
	show databases
		- 显示当前的所有数据库
	use 数据库名
		- 进入到指定的数据库中
	db
		- db表示的是当前所处的数据库
	show collections
		- 显示数据库中所有的集合
		
数据库的CRUD（增删改查）的操作
	- 向数据库中插入文档
		db.<collection>.insert(doc)
			- 向集合中插入一个文档
			- 例子：向test数据库中的，stus集合中插入一个新的学生对象
				{name:"孙悟空",age:18,gender:"男"}
				db.stus.insert({name:"孙悟空",age:18,gender:"男"})
		
		db.<collection>.find()
			- 查询当前集合中的所有的文档
---------------------------------------------------------------------
笔记 

node
	- 包（package）
		- 将多个模块组合为一个完整的功能，就是一个包
		- 包结构
			bin
				- 二进制的可执行文件，一般都是一些工具包中才有
			lib
				- js文件
			doc
				- 文档
			test
				- 测试代码
			package.json
				- 包的描述文件
				
		- package.json	
			- 它是一个json格式的文件，在它里面保存了包各种相关的信息
				name 包名
				version 版本
				dependencies 依赖
				main 包的主要的文件
				bin 运行的代码
				
	- npm（Node Package Manager node的包管理器）
		- 通过npm可以对node中的包进行上传、下载、搜索等操作
		- npm会在安装完node以后，自动安装
		- npm的常用指令
			npm -v 查看npm的版本
			npm version 查看所有模块的版本
			npm init 初始化项目（创建package.json）
			npm i/install 包名 安装指定的包
			npm i/install 包名 --save 安装指定的包并添加依赖
			npm i/install 包名 -g 全局安装（一般都是一些工具）
			npm i/install 安装当前项目所依赖的包
			npm s/search 包名 搜索包	
			npm r/remove 包名 删除一个包
			
文件系统（File System）
	- Buffer（缓冲区）
		- Buffer和数组的结构的非常类似，Buffer是用来存储二进制数据的
		- Buffer的方法
			- Buffer.from(字符串)
				- 将一个字符串中内容保存到一个buffer中
			- buf.toString()
				- 将buffer转换为一个字符串
			- Buffer.alloc(size)
				- 创建一个指定大小的buffer对象
			- Buffer.allocUnsafe(size)
				- 创建一个指定大小的buffer对象，可以包含敏感数据
				
				
	- fs模块
		- 在Node通过fs模块来对系统中的文件进行操作，fs模块是node中已经继承好了，不需要在使用npm下载，直接引入即可
		- 引入fs
			var fs = require("fs");
		- fs模块中的大部分操作都提供了两种方法，同步方法和异步方法
			同步方法带sync
			异步方法没有sync，都需要回调函数
			
		- 写入文件
			1.同步写入
			2.异步写入
			3.简单写入
			4.流式写入
			
		- 读取文件
			1.同步读取
			2.异步读取
			3.简单读取
			4.流式读取
			
		- 方法
			- 打开文件
				fs.open(path, flags[, mode], callback)
				fs.openSync(path, flags[, mode])
				
			- 读写文件
				fs.write(fd, string[, position[, encoding]], callback)
				fs.writeSync(fd, string[, position[, encoding]])
				
				fs.read(fd, buffer, offset, length, position, callback)
				fs.readSync(fd, buffer, offset, length, position)
				
			- 关闭文件
				fs.close(fd,callback)
				fs.closeSync(fd);
				
			- 简单文件读取和写入
				fs.writeFile(file, data[, options], callback)
				fs.writeFileSync(file, data[, options])
				
				fs.readFile(path[, options], callback)
				fs.readFileSync(path[, options])
				
				
			- 流式文件读取和写入
				- 流式读取和写入适用于一些比较大的文件
					fs.createWriteStream(path[, options])
					fs.createReadStream(path[, options])
---------------------------------------------------------------------
练习
01. 进入my_test数据库
02. 向数据库的user集合中插入一个文档	
03. 查询user集合中的文档
04. 向数据库的user集合中插入一个文档		
05. 查询数据库user集合中的文档
06. 统计数据库user集合中的文档数量
07. 查询数据库user集合中username为sunwukong的文档
08. 向数据库user集合中的username为sunwukong的文档，添加一个address属性，属性值为huaguoshan
09. 使用{username:"tangseng"} 替换 username 为 zhubajie的文档
10. 删除username为sunwukong的文档的address属性
11. 向username为sunwukong的文档中，添加一个hobby:{cities:["beijing","shanghai","shenzhen"] , movies:["sanguo","hero"]}
12. 向username为tangseng的文档中，添加一个hobby:{movies:["A Chinese Odyssey","King of comedy"]}
13. 查询喜欢电影hero的文档
14. 向tangseng中添加一个新的电影Interstellar
15. 删除喜欢beijing的用户
16. 删除user集合
17. 向numbers中插入20000条数据
18. 查询numbers中num为500的文档
19. 查询numbers中num大于5000的文档
20. 查询numbers中num小于30的文档
21. 查询numbers中num大于40小于50的文档
22. 查询numbers中num大于19996的文档
23. 查看numbers集合中的前10条数据
24. 查看numbers集合中的第11条到20条数据
25. 查看numbers集合中的第21条到30条数据
26. 将dept和emp集合导入到数据库中
27. 查询工资小于2000的员工
28. 查询工资在1000-2000之间的员工
29. 查询工资小于1000或大于2500的员工
30. 查询财务部的所有员工
31. 查询销售部的所有员工
32. 查询所有mgr为7698的所有员工
33. 为所有薪资低于1000的员工增加工资400元